{
  "version": 3,
  "file": "SMention.css",
  "sources": [
    "..\\SMention.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n    const KEY_CODE = {\r\n        up: 38,\r\n        down: 40,\r\n        enter: 13\r\n    }\r\n\r\n    let element;\r\n    \r\n    export let configs;\r\n    export let value = '';\r\n\r\n    export let onChange = null;\r\n    export let onSelected = null;\r\n\r\n    let query = '';\r\n    let dropdownOpened = false;\r\n    let selected = null;\r\n    let matches = [];\r\n    let activeConfig = null;\r\n    \r\n    function updateSelection(event){\r\n        if(dropdownOpened && event.which === KEY_CODE.up) {\r\n            moveSelectionUp();\r\n            event.preventDefault();\r\n        }\r\n\r\n        if(dropdownOpened && event.which === KEY_CODE.down) { \r\n            moveSelectionDown();\r\n            event.preventDefault();\r\n        }\r\n\r\n        if(dropdownOpened && event.which === KEY_CODE.enter) {\r\n            selectMatch(selected);\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    function updateValue(event) {\r\n        if(dropdownOpened && (event.which === KEY_CODE.up || event.which === KEY_CODE.down || event.which === KEY_CODE.enter)) {\r\n            return false;\r\n        }\r\n\r\n        const inputToCursor = value.slice(0, element.selectionStart);\r\n        matches = [], activeConfig = null;\r\n\r\n        configs.forEach(config => {\r\n            const delimiterMatches = inputToCursor.match(new RegExp(config.delimiter + '[\\\\w\\\\s]+$', \"g\"));\r\n            if(delimiterMatches) {\r\n                query = delimiterMatches[delimiterMatches.length - 1].substring(1);\r\n                matches = config.filter(config.options, query);\r\n                activeConfig = config;\r\n            }\r\n        });\r\n\r\n        if(matches.length > 0) {\r\n            dropdownOpened = true, selected = matches[0];\r\n        }\r\n        else {\r\n            dropdownOpened = false, selected = null;\r\n        }\r\n    }\r\n\r\n    function moveSelectionDown() {\r\n        const index = matches.indexOf(selected);\r\n        if(index < matches.length - 1) {\r\n            selected = matches[index + 1];\r\n        }\r\n    }\r\n\r\n    function moveSelectionUp() {\r\n        const index = matches.indexOf(selected);\r\n        if(index >= 1) {\r\n            selected = matches[index - 1];\r\n        }\r\n    }\r\n\r\n    function selectMatch(selected) {\r\n        const inputToCursor = value.slice(0, element.selectionStart);\r\n        const delimiterMatches = inputToCursor.match(new RegExp(activeConfig.delimiter + '[\\\\w\\\\s]+$', \"g\"));\r\n        if(delimiterMatches) {\r\n            const result = delimiterMatches[delimiterMatches.length - 1];\r\n            const inputAfterCursor = value.slice(element.selectionStart, value.length);\r\n\r\n            value = inputToCursor.replace(new RegExp(result + '$'), activeConfig.encode(selected)) \r\n                + (inputAfterCursor && inputAfterCursor[0] == ' ' ? '' : ' ')\r\n                + inputAfterCursor;\r\n            \r\n            if(onSelected) onSelected({ match: selected, config: activeConfig });\r\n            dropdownOpened = false;\r\n        }\r\n    }\r\n\r\n    function highlight(input, query) {\r\n        return input.replace(new RegExp(`(${query})`, 'gi'), ($0) => `<b>${$0}</b>`);\r\n    }\r\n\r\n    $: if(onChange) onChange(value);\r\n</script>\r\n\r\n<textarea class=\"smentions-textarea\" \r\n    bind:value\r\n    bind:this={element}\r\n    on:keydown={updateSelection}\r\n    on:keyup={updateValue}\r\n    on:click={updateValue}></textarea>\r\n<div class=\"dropdown\" class:hidden={!dropdownOpened}>\r\n    <ul class=\"items\">\r\n        {#each matches as match}\r\n            <li class={activeConfig.itemClass} \r\n                class:selected={selected===match}\r\n                on:click={() => selectMatch(match)}>\r\n                {#if activeConfig.template}\r\n                    {@html activeConfig.template(match, query)}\r\n                {:else}\r\n                    {highlight(match.label, query)}\r\n                {/if}\r\n            </li>\r\n        {/each}\r\n    </ul>\r\n    <div class=\"results\">\r\n        Showing {matches.length} results.\r\n    </div>\r\n</div>\r\n\r\n<style>\r\n    .smentions-textarea {\r\n        width: 800px;\r\n        resize: none;\r\n    }\r\n\r\n    .dropdown {\r\n        width: 800px;    \r\n        box-sizing: border-box;\r\n        border: 1px solid #ccc;\r\n    }\r\n\r\n    .dropdown.hidden {\r\n        display: none;\r\n    }\r\n    \r\n    .items {\r\n        list-style: none;\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n    \r\n    .results {\r\n        padding: 4px;\r\n        height: 24px;\r\n        color: rgba(0,0,0,.55);\r\n        font-size: 14px;\r\n        box-sizing: border-box;\r\n    }\r\n</style>"
  ],
  "names": [],
  "mappings": "AA8HI,mBAAmB,eAAC,CAAC,AACjB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,IAAI,AAChB,CAAC,AAED,SAAS,eAAC,CAAC,AACP,KAAK,CAAE,KAAK,CACZ,UAAU,CAAE,UAAU,CACtB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AAC1B,CAAC,AAED,SAAS,OAAO,eAAC,CAAC,AACd,OAAO,CAAE,IAAI,AACjB,CAAC,AAED,MAAM,eAAC,CAAC,AACJ,UAAU,CAAE,IAAI,CAChB,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,AACd,CAAC,AAED,QAAQ,eAAC,CAAC,AACN,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACtB,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,UAAU,AAC1B,CAAC"
}