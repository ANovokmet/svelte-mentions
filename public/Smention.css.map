{
  "version": 3,
  "file": "SMention.css",
  "sources": [
    "..\\src\\SMention.html"
  ],
  "sourcesContent": [
    "<textarea class=\"text-input\"\r\n\ton:keydown=\"preventArrowKeys(event)\"\r\n\ton:keyup=\"updateValue(this.value, event)\"\r\n\ton:click=\"updateValue(this.value, event)\"\r\n\tref:input></textarea>\r\n<div class=\"dropdown\" class:hidden=\"!dropdownOpened\">\r\n\t<ul class=\"items\">\r\n\t\t{#each matches as match}\r\n\t\t\t<li class=\"{activeConfig.itemClass}\" class:selected=\"selected===match\" on:click=\"enterSelection(match)\">\r\n\t\t\t\t{@html activeConfig.template(match, query)}\r\n\t\t\t</li>\r\n\t\t{/each}\r\n\t</ul>\r\n\t<div class=\"results\">\r\n\t\tShowing {matches.length} results.\r\n\t</div>\r\n</div>\r\n\r\n<script>\r\n\tconst KEY_CODE = {\r\n\t\tup: 38,\r\n\t\tdown: 40,\r\n\t\tenter: 13\r\n\t}\r\n\r\n\texport default {\r\n\t\toncreate(){\r\n\t\t\tconst { inputValue } = this.get();\r\n\t\t\tthis.refs.input.value = inputValue;\r\n\t\t},\r\n\t\tmethods: {\r\n\t\t\tpreventArrowKeys(event){\r\n\t\t\t\tconst {dropdownOpened} = this.get();\r\n\t\t\t\tif(dropdownOpened && event.which === KEY_CODE.up){\r\n\t\t\t\t\tthis.moveSelectionUp();\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t}\r\n\t\t\t\telse if(dropdownOpened && event.which === KEY_CODE.down){ \r\n\t\t\t\t\tthis.moveSelectionDown();\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t}\r\n\t\t\t\telse if(dropdownOpened && event.which === KEY_CODE.enter){\r\n\t\t\t\t\tconst {selected} = this.get();\r\n\t\t\t\t\tthis.enterSelection(selected);\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tupdateValue(value, event) {\r\n\t\t\t\tconst inputValue = value;\r\n\t\t\t\tthis.set({inputValue});\r\n\r\n\t\t\t\tconst { dropdownOpened } = this.get();\r\n\t\t\t\t//block arrowkeys from updating input\r\n\t\t\t\tif(dropdownOpened && (event.which === 38 || event.which === 40 || event.which === 13)){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst cursorPosition = this.refs.input.selectionStart;\r\n\t\t\t\tconst inputToCursor = inputValue.slice(0, cursorPosition);\r\n\t\t\t\tconsole.log('input to c', inputToCursor);\r\n\r\n\t\t\t\tconst { configs } = this.get();\r\n\t\t\t\tlet matches = [], activeConfig = null;\r\n\r\n\t\t\t\tconfigs.forEach(config => {\r\n\t\t\t\t\tconst parsed = inputToCursor.match(new RegExp(config.delimiter + '[\\\\w\\\\s]+$', \"g\")); //\\p{L} for localized\r\n\r\n\t\t\t\t\tconsole.log('parsed' + config.delimiter, parsed);\r\n\t\t\t\t\tif(parsed){\r\n\t\t\t\t\t\tconst result = parsed[parsed.length-1].substring(1);//remove delimiter (1 char)\r\n\t\t\t\t\t\tconsole.log(result);\r\n\t\t\t\t\t\tthis.set({query: result});\r\n\t\t\t\t\t\t//todo extract\r\n\t\t\t\t\t\tmatches = config.filter(config.options, result);\r\n\t\t\t\t\t\t//matches.forEach(m => m.html = this.getHtml(m.name, result));\r\n\t\t\t\t\t\tactiveConfig = config;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tconfig.decode(inputValue, config.options);\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif(matches.length > 0){\r\n\t\t\t\t\tthis.set({dropdownOpened: true, selected: matches[0], activeConfig});\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthis.set({dropdownOpened: false, selected: null});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.set({matches});\r\n\t\t\t\t\r\n\t\t\t},\r\n\t\t\tmoveSelectionDown() {\r\n\t\t\t\tconst {selected, matches} = this.get();\r\n\t\t\t\tconst index = matches.indexOf(selected);\r\n\t\t\t\tif(index < matches.length - 1) {\r\n\t\t\t\t\tthis.set({selected: matches[index + 1]});\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tmoveSelectionUp() {\r\n\t\t\t\tconst {selected, matches} = this.get();\r\n\t\t\t\tconst index = matches.indexOf(selected);\r\n\t\t\t\tif(index >= 1) {\r\n\t\t\t\t\tthis.set({selected: matches[index - 1]});\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tenterSelection(selected) {\r\n\t\t\t\tconst { activeConfig, inputValue } = this.get();\r\n\t\t\t\tconst cursorPosition = this.refs.input.selectionStart;\r\n\r\n\t\t\t\tconst inputToCursor = inputValue.slice(0, cursorPosition);\r\n\t\t\t\tconst parsed = inputToCursor.match(new RegExp(activeConfig.delimiter + '[\\\\w\\\\s]+$', \"g\")); //\\p{L} for localized\r\n\t\t\t\tif(parsed) {\r\n\t\t\t\t\tconst result = parsed[parsed.length-1];\r\n\t\t\t\t\t//replace last occurence\r\n\t\t\t\t\t//new RegExp(result + '$') + new RegExp('^' + result)\r\n\t\t\t\t\tconst newInput = inputToCursor.replace(new RegExp(result + '$'), activeConfig.encode(selected) + ' ') + inputValue.slice(cursorPosition, inputValue.length);\r\n\t\t\t\t\tthis.set({inputValue: newInput, dropdownOpened: false});\r\n\t\t\t\t\tthis.refs.input.value = newInput;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tdata() {\r\n\t\t\treturn { \r\n\t\t\t\tconfigs: [],\r\n\t\t\t\tinputValue: '',\r\n\t\t\t\tquery: '',\r\n\t\t\t\tmatches: [],\r\n\t\t\t\tactiveConfig: null,\r\n\t\t\t\tdropdownOpened: false,\r\n\t\t\t\tselected: null\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n</script>\r\n\r\n\r\n<style>\r\n\t.text-input {\r\n\t\twidth: 800px;\r\n  \t\tresize: none;\r\n\t}\r\n\r\n\t.dropdown {\r\n\t\twidth: 800px;    \r\n\t\tbox-sizing: border-box;\r\n\t\tborder: 1px solid #ccc;\r\n\t}\r\n\r\n\t.dropdown.hidden {\r\n\t\tdisplay: none;\r\n\t}\r\n\r\n\t.item:hover {\r\n\t\tbackground-color: rgba(234,234,234,1);\r\n\t}\r\n\r\n\t.item.selected {\r\n\t\tbackground-color: rgba(222,236,249,1);\r\n\t}\r\n\r\n\r\n\t.items {\r\n\t\tlist-style: none;\r\n\t\tmargin: 0;\r\n    \tpadding: 0;\r\n\t}\r\n\r\n\t.item {\r\n\t\tdisplay: block;\r\n\t\theight: 40px;\r\n\t}\r\n\r\n\t.image {\r\n\t\tvertical-align: top;\r\n\t\tmargin: 4px;\r\n\t\tfloat: left;\r\n\t\theight: 32px;\r\n    \twidth: 32px;\r\n    \tborder-radius: 16px;\r\n\t}\r\n\r\n\t.label {\r\n\t\tbox-sizing: border-box;\r\n\t\theight: 40px;\r\n\t\tpadding-bottom: 4px;\r\n    \tpadding-top: 4px;\r\n\t\toverflow: hidden;\r\n\t\ttext-overflow: ellipsis;\r\n\t\twhite-space: nowrap;\r\n\t\tword-wrap: normal;\r\n\t}\r\n\r\n\t.title {\r\n\t\tfont-size: 12px;\r\n    \tline-height: 12px;\r\n    \tpadding-top: 3px;\r\n    \tpadding-bottom: 2px;\r\n\t}\r\n\r\n\t.subtitle {\r\n\t\tfont-size: 12px;\r\n\t\tcolor: rgba(0,0,0,.55);\r\n\t\tpadding-bottom: 3px;\r\n\t\tline-height: 12px;\r\n\t}\r\n\r\n\t.results {\r\n\t\tpadding: 4px;\r\n    \theight: 24px;\r\n\t\tcolor: rgba(0,0,0,.55);\r\n\t\tfont-size: 14px;\r\n\t\tbox-sizing: border-box;\r\n\t}\r\n</style>"
  ],
  "names": [],
  "mappings": "AA0IC,WAAW,eAAC,CAAC,AACZ,KAAK,CAAE,KAAK,CACV,MAAM,CAAE,IAAI,AACf,CAAC,AAED,SAAS,eAAC,CAAC,AACV,KAAK,CAAE,KAAK,CACZ,UAAU,CAAE,UAAU,CACtB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AACvB,CAAC,AAED,SAAS,OAAO,eAAC,CAAC,AACjB,OAAO,CAAE,IAAI,AACd,CAAC,AAED,oBAAK,MAAM,AAAC,CAAC,AACZ,gBAAgB,CAAE,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,AACtC,CAAC,AAED,KAAK,SAAS,eAAC,CAAC,AACf,gBAAgB,CAAE,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,AACtC,CAAC,AAGD,MAAM,eAAC,CAAC,AACP,UAAU,CAAE,IAAI,CAChB,MAAM,CAAE,CAAC,CACN,OAAO,CAAE,CAAC,AACd,CAAC,AAED,KAAK,eAAC,CAAC,AACN,OAAO,CAAE,KAAK,CACd,MAAM,CAAE,IAAI,AACb,CAAC,AAED,MAAM,eAAC,CAAC,AACP,cAAc,CAAE,GAAG,CACnB,MAAM,CAAE,GAAG,CACX,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACT,KAAK,CAAE,IAAI,CACX,aAAa,CAAE,IAAI,AACvB,CAAC,AAED,MAAM,eAAC,CAAC,AACP,UAAU,CAAE,UAAU,CACtB,MAAM,CAAE,IAAI,CACZ,cAAc,CAAE,GAAG,CAChB,WAAW,CAAE,GAAG,CACnB,QAAQ,CAAE,MAAM,CAChB,aAAa,CAAE,QAAQ,CACvB,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,MAAM,AAClB,CAAC,AAED,MAAM,eAAC,CAAC,AACP,SAAS,CAAE,IAAI,CACZ,WAAW,CAAE,IAAI,CACjB,WAAW,CAAE,GAAG,CAChB,cAAc,CAAE,GAAG,AACvB,CAAC,AAED,SAAS,eAAC,CAAC,AACV,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACtB,cAAc,CAAE,GAAG,CACnB,WAAW,CAAE,IAAI,AAClB,CAAC,AAED,QAAQ,eAAC,CAAC,AACT,OAAO,CAAE,GAAG,CACT,MAAM,CAAE,IAAI,CACf,KAAK,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACtB,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,UAAU,AACvB,CAAC"
}