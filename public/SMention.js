var SMention = (function () {
	'use strict';

	function noop() {}

	function assign(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function assignTrue(tar, src) {
		for (var k in src) tar[k] = 1;
		return tar;
	}

	function addLoc(element, file, line, column, char) {
		element.__svelte_meta = {
			loc: { file, line, column, char }
		};
	}

	function run(fn) {
		fn();
	}

	function append(target, node) {
		target.appendChild(node);
	}

	function insert(target, node, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function destroyEach(iterations, detach) {
		for (var i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d(detach);
		}
	}

	function createElement(name) {
		return document.createElement(name);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function addListener(node, event, handler) {
		node.addEventListener(event, handler, false);
	}

	function removeListener(node, event, handler) {
		node.removeEventListener(event, handler, false);
	}

	function setData(text, data) {
		text.data = '' + data;
	}

	function toggleClass(element, name, toggle) {
		element.classList.toggle(name, !!toggle);
	}

	function blankObject() {
		return Object.create(null);
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = noop;

		this._fragment.d(detach !== false);
		this._fragment = null;
		this._state = {};
	}

	function destroyDev(detach) {
		destroy.call(this, detach);
		this.destroy = function() {
			console.warn('Component was already destroyed');
		};
	}

	function _differs(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			var handler = handlers[i];

			if (!handler.__calling) {
				try {
					handler.__calling = true;
					handler.call(this, data);
				} finally {
					handler.__calling = false;
				}
			}
		}
	}

	function flush(component) {
		component._lock = true;
		callAll(component._beforecreate);
		callAll(component._oncreate);
		callAll(component._aftercreate);
		component._lock = false;
	}

	function get() {
		return this._state;
	}

	function init(component, options) {
		component._handlers = blankObject();
		component._slots = blankObject();
		component._bind = options._bind;
		component._staged = {};

		component.options = options;
		component.root = options.root || component;
		component.store = options.store || component.root.store;

		if (!options.root) {
			component._beforecreate = [];
			component._oncreate = [];
			component._aftercreate = [];
		}
	}

	function on(eventName, handler) {
		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		flush(this.root);
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		newState = assign(this._staged, newState);
		this._staged = {};

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign(assign({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			this.fire("state", { changed: changed, current: this._state, previous: oldState });
			this._fragment.p(changed, this._state);
			this.fire("update", { changed: changed, current: this._state, previous: oldState });
		}
	}

	function _stage(newState) {
		assign(this._staged, newState);
	}

	function setDev(newState) {
		if (typeof newState !== 'object') {
			throw new Error(
				this._debugName + '.set was called without an object of data key-values to update.'
			);
		}

		this._checkReadOnly(newState);
		set.call(this, newState);
	}

	function callAll(fns) {
		while (fns && fns.length) fns.shift()();
	}

	function _mount(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	var protoDev = {
		destroy: destroyDev,
		get,
		fire,
		on,
		set: setDev,
		_recompute: noop,
		_set,
		_stage,
		_mount,
		_differs
	};

	/* src\SMention.html generated by Svelte v2.13.5 */

	const KEY_CODE = {
		up: 38,
		down: 40,
		enter: 13
	};

	function data() {
		return { 
			configs: [],
			inputValue: '',
			query: '',
			matches: [],
			activeConfig: null,
			dropdownOpened: false,
			selected: null
		}
	}
	var methods = {
		preventArrowKeys(event){
			const {dropdownOpened} = this.get();
			if(dropdownOpened && event.which === KEY_CODE.up){
				this.moveSelectionUp();
				event.preventDefault();
			}
			else if(dropdownOpened && event.which === KEY_CODE.down){ 
				this.moveSelectionDown();
				event.preventDefault();
			}
			else if(dropdownOpened && event.which === KEY_CODE.enter){
				const {selected} = this.get();
				this.enterSelection(selected);
				event.preventDefault();
			}
		},
		updateValue(value, event) {
			const inputValue = value;
			this.set({inputValue});

			const { dropdownOpened } = this.get();
			//block arrowkeys from updating input
			if(dropdownOpened && (event.which === 38 || event.which === 40 || event.which === 13)){
				return false;
			}

			const cursorPosition = this.refs.input.selectionStart;
			const inputToCursor = inputValue.slice(0, cursorPosition);
			console.log('input to c', inputToCursor);

			const { configs } = this.get();
			let matches = [], activeConfig = null;

			configs.forEach(config => {
				const parsed = inputToCursor.match(new RegExp(config.delimiter + '[\\w\\s]+$', "g")); //\p{L} for localized

				console.log('parsed' + config.delimiter, parsed);
				if(parsed){
					const result = parsed[parsed.length-1].substring(1);//remove delimiter (1 char)
					console.log(result);
					this.set({query: result});
					//todo extract
					matches = config.filter(config.options, result);
					//matches.forEach(m => m.html = this.getHtml(m.name, result));
					activeConfig = config;

				}
				
				config.decode(inputValue, config.options);
			});

			if(matches.length > 0){
				this.set({dropdownOpened: true, selected: matches[0], activeConfig});
			}
			else{
				this.set({dropdownOpened: false, selected: null});
			}

			this.set({matches});
			
		},
		moveSelectionDown() {
			const {selected, matches} = this.get();
			const index = matches.indexOf(selected);
			if(index < matches.length - 1) {
				this.set({selected: matches[index + 1]});
			}
		},
		moveSelectionUp() {
			const {selected, matches} = this.get();
			const index = matches.indexOf(selected);
			if(index >= 1) {
				this.set({selected: matches[index - 1]});
			}
		},
		enterSelection(selected) {
			const { activeConfig, inputValue } = this.get();
			const cursorPosition = this.refs.input.selectionStart;

			const inputToCursor = inputValue.slice(0, cursorPosition);
			const parsed = inputToCursor.match(new RegExp(activeConfig.delimiter + '[\\w\\s]+$', "g")); //\p{L} for localized
			if(parsed) {
				const result = parsed[parsed.length-1];
				//replace last occurence
				//new RegExp(result + '$') + new RegExp('^' + result)
				const newInput = inputToCursor.replace(new RegExp(result + '$'), activeConfig.encode(selected) + ' ') + inputValue.slice(cursorPosition, inputValue.length);
				this.set({inputValue: newInput, dropdownOpened: false});
				this.refs.input.value = newInput;
			}
		}
	};

	function oncreate(){
		const { inputValue } = this.get();
		this.refs.input.value = inputValue;
	}
	const file = "src\\SMention.html";

	function create_main_fragment(component, ctx) {
		var textarea, text, div, ul, text_2, div_1, text_3, text_4_value = ctx.matches.length, text_4, text_5, current;

		function keydown_handler(event) {
			component.preventArrowKeys(event);
		}

		function keyup_handler(event) {
			component.updateValue(this.value, event);
		}

		function click_handler(event) {
			component.updateValue(this.value, event);
		}

		var each_value = ctx.matches;

		var each_blocks = [];

		for (var i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block(component, get_each_context(ctx, each_value, i));
		}

		return {
			c: function create() {
				textarea = createElement("textarea");
				text = createText("\r\n");
				div = createElement("div");
				ul = createElement("ul");

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				text_2 = createText("\r\n\t");
				div_1 = createElement("div");
				text_3 = createText("Showing ");
				text_4 = createText(text_4_value);
				text_5 = createText(" results.");
				addListener(textarea, "keydown", keydown_handler);
				addListener(textarea, "keyup", keyup_handler);
				addListener(textarea, "click", click_handler);
				textarea.className = "text-input svelte-1uatgeu";
				addLoc(textarea, file, 0, 0, 0);
				ul.className = "items svelte-1uatgeu";
				addLoc(ul, file, 6, 1, 237);
				div_1.className = "results svelte-1uatgeu";
				addLoc(div_1, file, 13, 1, 473);
				div.className = "dropdown svelte-1uatgeu";
				toggleClass(div, "hidden", !ctx.dropdownOpened);
				addLoc(div, file, 5, 0, 181);
			},

			m: function mount(target, anchor) {
				insert(target, textarea, anchor);
				component.refs.input = textarea;
				insert(target, text, anchor);
				insert(target, div, anchor);
				append(div, ul);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(ul, null);
				}

				append(div, text_2);
				append(div, div_1);
				append(div_1, text_3);
				append(div_1, text_4);
				append(div_1, text_5);
				current = true;
			},

			p: function update(changed, ctx) {
				if (changed.activeConfig || changed.selected || changed.matches || changed.query) {
					each_value = ctx.matches;

					for (var i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(changed, child_ctx);
						} else {
							each_blocks[i] = create_each_block(component, child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(ul, null);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].d(1);
					}
					each_blocks.length = each_value.length;
				}

				if ((changed.matches) && text_4_value !== (text_4_value = ctx.matches.length)) {
					setData(text_4, text_4_value);
				}

				if (changed.dropdownOpened) {
					toggleClass(div, "hidden", !ctx.dropdownOpened);
				}
			},

			i: function intro(target, anchor) {
				if (current) return;

				this.m(target, anchor);
			},

			o: run,

			d: function destroy$$1(detach) {
				if (detach) {
					detachNode(textarea);
				}

				removeListener(textarea, "keydown", keydown_handler);
				removeListener(textarea, "keyup", keyup_handler);
				removeListener(textarea, "click", click_handler);
				if (component.refs.input === textarea) component.refs.input = null;
				if (detach) {
					detachNode(text);
					detachNode(div);
				}

				destroyEach(each_blocks, detach);
			}
		};
	}

	// (8:2) {#each matches as match}
	function create_each_block(component, ctx) {
		var li, raw_value = ctx.activeConfig.template(ctx.match, ctx.query), li_class_value;

		return {
			c: function create() {
				li = createElement("li");
				li._svelte = { component, ctx };

				addListener(li, "click", click_handler);
				li.className = li_class_value = "" + ctx.activeConfig.itemClass + " svelte-1uatgeu";
				toggleClass(li, "selected", ctx.selected===ctx.match);
				addLoc(li, file, 8, 3, 288);
			},

			m: function mount(target, anchor) {
				insert(target, li, anchor);
				li.innerHTML = raw_value;
			},

			p: function update(changed, _ctx) {
				ctx = _ctx;
				if ((changed.activeConfig || changed.matches || changed.query) && raw_value !== (raw_value = ctx.activeConfig.template(ctx.match, ctx.query))) {
					li.innerHTML = raw_value;
				}

				li._svelte.ctx = ctx;
				if ((changed.activeConfig) && li_class_value !== (li_class_value = "" + ctx.activeConfig.itemClass + " svelte-1uatgeu")) {
					li.className = li_class_value;
				}

				if ((changed.activeConfig || changed.selected || changed.matches)) {
					toggleClass(li, "selected", ctx.selected===ctx.match);
				}
			},

			d: function destroy$$1(detach) {
				if (detach) {
					detachNode(li);
				}

				removeListener(li, "click", click_handler);
			}
		};
	}

	function get_each_context(ctx, list, i) {
		const child_ctx = Object.create(ctx);
		child_ctx.match = list[i];
		child_ctx.each_value = list;
		child_ctx.match_index = i;
		return child_ctx;
	}

	function click_handler(event) {
		const { component, ctx } = this._svelte;

		component.enterSelection(ctx.match);
	}

	function SMention(options) {
		this._debugName = '<SMention>';
		if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
		init(this, options);
		this.refs = {};
		this._state = assign(data(), options.data);
		if (!('dropdownOpened' in this._state)) console.warn("<SMention> was created without expected data property 'dropdownOpened'");
		if (!('matches' in this._state)) console.warn("<SMention> was created without expected data property 'matches'");
		if (!('activeConfig' in this._state)) console.warn("<SMention> was created without expected data property 'activeConfig'");
		if (!('selected' in this._state)) console.warn("<SMention> was created without expected data property 'selected'");
		if (!('query' in this._state)) console.warn("<SMention> was created without expected data property 'query'");
		this._intro = !!options.intro;

		this._fragment = create_main_fragment(this, this._state);

		this.root._oncreate.push(() => {
			oncreate.call(this);
			this.fire("update", { changed: assignTrue({}, this._state), current: this._state });
		});

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);

			flush(this);
		}

		this._intro = true;
	}

	assign(SMention.prototype, protoDev);
	assign(SMention.prototype, methods);

	SMention.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	return SMention;

}());
//# sourceMappingURL=SMention.js.map
